/*********************************/
/* Copyright 2009 Thiago Noronha */
/*********************************/

#ifndef _BinRWA_H_
#define _BinRWA_H_

#include "./solution.h"

class BinRWA {
 private:
  // Numero de Vertices
  int numVertices;

  // Numero de Arestas
  int numArcs;

  // Numero de Caminhos
  int numPath;

  // Lista com as conexoes
  Terminals terminals[MAXPATH];

  // Tamanho maximo de um caminho
  int maxSize;

  // Lista de Bins
  Graph* bins[MAXPATH];

  // lista de caminhos mais curtos de cada conexao
  int spList[MAXPATH];

 public:
  // Construtor
  BinRWA();

  // Calcula o Fitness de um cromossomo
  double Fitness(double* chromo);

  // Destrutor
  ~BinRWA();

  // Codigo comum as heur√≠sticas FF_RWA, BF_RWA, FFD_RWA, BFD_RWA
  int fit(int[MAXPATH], int);

  // Define uma permutacao dos caminhos
  // em ordem decrescente de caminho mais curto
  void decreasing(int[MAXPATH], double* tieBreak = NULL);

  // Executa a heuristica FF_RWA
  inline int ff(int p[MAXPATH]) {
    return fit(p, 1);
  }

  // Executa a heuristica BF_RWA
  inline int bf(int p[MAXPATH]) {
    return fit(p, 0);
  }

  // Executa a heuristica FFD_RWA
  inline int ffd() {
    int p[MAXPATH];
    decreasing(p);
    return ff(p);
  }

  // Executa a heuristica BFD_RWA
  inline int bfd() {
    int p[MAXPATH];
    decreasing(p);
    return bf(p);
  }
};

#endif  // _BinRWA_H_
