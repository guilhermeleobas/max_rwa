#ifndef _HEAPBUCKET_H
#define _HEAPBUCKET_H

#include <stdlib.h>             
#include <stdio.h>
#include "graph.h"

/* For the sake of inlining, we include implementation in header file 
*************************************************************************/

typedef struct {
	int bucketSize;
	int minKey;
	int maxKey;
	int bucket[MAXVERT][MAXVERT];
	int sizeKey[MAXVERT];
	int key[MAXVERT];
	int keyIndex[MAXVERT];

} Heap;


inline static Heap* HeapInit(int numVertices){
  Heap *h = new Heap;
  h->bucketSize = 0;
  h->minKey=numVertices;
  h->maxKey=numVertices;
  for(int i=0;i<numVertices;i++){
    h->sizeKey[i]=0;
	 h->keyIndex[i]=-1;
  }
  return h;
} 

inline static void HeapDecKey(Heap *h, int v, int k){
	assert(h->keyIndex[v]>=0);
	//Ativar: assert(k>=h->minKey);
	assert(k<h->maxKey);
	assert(k<h->key[v]);

	// Retira v da chave h->key[v]
	if(h->sizeKey[h->key[v]]>1){
		int vKey = h->key[v];
		int vIndex = h->keyIndex[v];
		int last = h->bucket[vKey][h->sizeKey[vKey]-1];
		h->bucket[vKey][vIndex] = last;
		h->keyIndex[last]=vIndex;
	}
	h->sizeKey[h->key[v]]--;

	// Insere v na chave "k"
	h->key[v]=k;
	h->bucket[k][h->sizeKey[k]]=v;
	h->keyIndex[v]=h->sizeKey[k];
	h->sizeKey[k]++;

	// Verifica se nao eh menor que o menor
	if(k<h->minKey) h->minKey=k;

}

inline static void HeapInsert(Heap *h, int v, int k){
	assert(h->keyIndex[v]<0);
	assert(k<h->maxKey);

	h->key[v]=k;
	h->keyIndex[v] = h->sizeKey[k];
	h->bucket[k][h->keyIndex[v]] = v;
	h->sizeKey[k]++;
	if(k<h->minKey) h->minKey=k;
	h->bucketSize++;
}

inline static int  HeapMin(Heap *h) {
	assert(h->bucketSize>0); 

	while(h->sizeKey[h->minKey]==0 && h->minKey<h->maxKey) h->minKey++;
		return h->bucket[h->minKey][h->sizeKey[h->minKey]-1];
}

inline static void HeapCheck(Heap *h){
	for(int i=0;i<h->maxKey;i++){
		for(int j=0;j<h->sizeKey[i];j++){
			assert(h->keyIndex[h->bucket[i][j]]==j);
		}
	}
}

inline static void HeapDelMin(Heap *h){
	assert(h->bucketSize>0);
	assert(h->sizeKey[h->minKey]>0);

	h->keyIndex[HeapMin(h)]=-1;
	h->sizeKey[h->minKey]--;
	h->bucketSize--;
	if(h->bucketSize==0){
		h->minKey=h->maxKey;
	} 
}





inline static void HeapFree(Heap *h){delete h;}
inline static void HeapSetKeys(Heap *h, int *k){}
inline static int  HeapSize(Heap *h){return (h->bucketSize);}

inline static void HeapPrint(Heap *h){
	cout << "Heap size: " << HeapSize(h) << endl;
	if(HeapSize(h)>0){
		cout << "Min: " << HeapMin(h) << endl;
		cout << "MinKey: " << h->minKey << endl;
	}

	for(int i=0;i<h->maxKey;i++){
		if(h->sizeKey[i]>0){
			cout << i << ": ";
			for(int j=0;j<h->sizeKey[i];j++){
				cout << h->bucket[i][j] << "(" << h->keyIndex[h->bucket[i][j]] << ")" << " ";
			}
			cout << " = " << h->sizeKey[i] << endl;
		}
	}
}




#endif
