#ifndef _HEAP_H
#define _HEAP_H

/* A tuned 4-heap inspirred by one of Andrew Goldberg */
/* I changed it quite a bit, so Andrew may no longer recognize it */

/* The application maintains an array of heapvalues indexed by heapindices */
/* Via insert the application tells which keys to put in the heap, and */
/* via decrease it tells what keys are decreased. */

#include <stdlib.h>             
#include <stdio.h>

typedef long heapindices; /* indices of keys */
typedef int heapvalues; /* key values */

typedef struct {
  heapindices N;
  heapindices Size;
  heapindices *Pos;
  heapindices *Node;
  heapvalues *key;
} Heap;



/* For the sake of inlining, we include implementation in header file */
inline static int HeapMember(Heap *h, heapindices v)
//int HeapMember(Heap *h, heapindices v)
{
  return (h->Pos[v]<h->Size && v==h->Node[h->Pos[v]]);
}




inline static Heap* HeapInit(heapindices maxitems)
//Heap* HeapInit(heapindices maxitems)
{
  Heap *h = (Heap*) malloc(sizeof(Heap));
  h->N=maxitems;
  h->Size = 0;
  h->Node=(heapindices*) malloc(maxitems*sizeof(heapindices));

/*the next line was modified for Luciana Buriol due to the HeapMember function*/
//  h->Pos=(heapindices*) malloc(maxitems*sizeof(heapindices));
  h->Pos=(heapindices*) calloc(maxitems,sizeof(heapindices));
  return h;
} 



inline static void HeapFree(Heap *h)
//void HeapFree(Heap *h)
{
  free(h->Node);
  free(h->Pos);
  free(h);
}



inline static void HeapSetKeys(Heap *h, heapvalues *k)
//void HeapSetKeys(Heap *h, heapvalues *k)
{
  h->key = k;
}



inline static heapindices HeapSize(Heap *h)
//heapindices HeapSize(Heap *h)
{ return (h->Size); }

#define LOG_HEAP_DEGREE  2       /* a 2^(LHD)-ary tree*/

#define MIN(a,b)        ( (a) > (b) ? (b) : (a) )

#define PLACE_NODE(v, i)    \
{ Node[i] = (v);  Pos[v] = (i); }



inline static heapindices HeapMin(Heap *h) {
//heapindices HeapMin(Heap *h) {
  return h->Node[0];
}





inline static void HeapPrint(Heap *h)
//void HeapPrint(Heap *h)
{
   heapindices iNode, iChild;
   heapvalues *key = h->key;
   heapindices *Node = h->Node;
   int Size = h->Size;

   fprintf(stderr, "\nTHE HEAP: size %i of %i", (int)Size, (int)h->N);
   for ( iNode = 0; iNode < Size; iNode++ )
   {
      fprintf(stderr,"\npos %i (%i,%d): ",(int)iNode,(int)Node[iNode],key[Node[iNode]]);
      for ( iChild = (iNode << LOG_HEAP_DEGREE) + 1;
            iChild <= (iNode+1) << LOG_HEAP_DEGREE  &&  iChild < Size;
            iChild++ )
      {
         fprintf(stderr, "(%i,%d) ", (int)Node[iChild],key[Node[iChild]]);
         if ( key[Node[iChild]] < key[Node[iNode]] )   /* bad bad bad*/
           { fprintf(stderr, "** bad bad bad **");exit(0);}
      }
   }
   fprintf(stderr, "\n\n");
}
         
        



/*This function was added for Luciana Buriol*/
inline static void HeapUpdateIncreasing(Heap *h, heapindices v)
//void HeapUpdateIncreasing(Heap *h, heapindices v)
{
   heapindices smallest, pos_aux, node_aux, index, left, right, size;
   heapindices iCurrent, iParent;
   heapindices nodeParent;
   heapvalues x;
   heapvalues *key = h->key;
   heapindices *Pos = h->Pos;
   heapindices *Node = h->Node;
   int flag=1;

   size = h->Size;

   if (size < 2) return;

   x=key[v];
   for ( iCurrent=Pos[v],
         iParent=(Pos[v]-1)>>LOG_HEAP_DEGREE;
         iCurrent > 0;
         iCurrent = iParent, iParent = (iParent-1) >> LOG_HEAP_DEGREE )
   {
      nodeParent = Node[iParent];
      if ( x >= key[nodeParent] )   break;
      PLACE_NODE( nodeParent, iCurrent);    
      flag = 0;
   }    
   PLACE_NODE( v, iCurrent );           

if (flag){//if run the first part of this function, this part will not be useful
   index = Pos[v];
 do{
   left = (index << LOG_HEAP_DEGREE) + 1;
   if (left >= size) return;
   right = left + 1;
   if (right>=size) right=left;
      
   smallest = (left<size && (key[Node[left]] < key[Node[index]])) ?  left: index;
   if(right < size && key[Node[right]]< key[Node[smallest]]) smallest = right;
   
   if (smallest != index){ 
        pos_aux = Pos[Node[index]];
   	node_aux = Node[smallest];
        PLACE_NODE(Node[index], Pos[Node[smallest]]);
        PLACE_NODE(node_aux, pos_aux);

        index = Pos[smallest];
   }
   else flag=0;
 }while(flag);
}
}



inline static void HeapDecKey(Heap *h, heapindices v, int addedForCompatibility=0)
//void HeapDecKey(Heap *h, heapindices v)
{
	// ATIVAR: 
   heapindices iCurrent, iParent;
   heapindices nodeParent;
   heapvalues x;
   heapvalues *key = h->key;
   heapindices *Pos = h->Pos;
   heapindices *Node = h->Node;

   x=key[v];
   for ( iCurrent=Pos[v], 
         iParent=(Pos[v]-1)>>LOG_HEAP_DEGREE;
	 iCurrent > 0;
	 iCurrent = iParent, iParent = (iParent-1) >> LOG_HEAP_DEGREE )
   {

      nodeParent = Node[iParent];

      if ( x >= key[nodeParent] )   /* we are in the right place*/
	 break;
      PLACE_NODE( nodeParent, iCurrent);     /* else move the parent down*/
   }
   PLACE_NODE( v, iCurrent );              /* put the node in the hole*/
}



inline static void HeapInsert(Heap *h, heapindices v, int addedForCompatibility=0)
//void HeapInsert(Heap *h, heapindices v)
{
  heapindices *Pos = h->Pos;
  heapindices *Node = h->Node;

  PLACE_NODE(v,h->Size);
  h->Size++;
  HeapDecKey(h, v);
}


inline static void HeapDelMin(Heap *h)
//void HeapDelMin(Heap *h)
{
   heapindices iCurrent, iChild, iGoodChild, iFirstChild, iLastChild;
   heapvalues minValue;      /* min value of children of us (dbl for prec.)*/
   heapindices node;
   heapvalues nodekey;
   heapvalues *key = h->key;
   heapindices *Pos = h->Pos;
   heapindices *Node = h->Node;


   h->Size--;    
   node=Node[h->Size];
   nodekey=key[node];
 
   for ( iCurrent = 0;
	 /* break when value <= min */;
	 iCurrent = iGoodChild )
   {
      iFirstChild = (iCurrent << LOG_HEAP_DEGREE) + 1;
      iLastChild = MIN( iFirstChild + (1<<LOG_HEAP_DEGREE) - 1, h->Size-1 );

      if ( iFirstChild >= h->Size )                 /* at the end of the tree*/
	 break;
      minValue = key[Node[iFirstChild]];
      iGoodChild = iFirstChild;                  /* the child with the min*/
      for ( iChild = iFirstChild+1; iChild <= iLastChild; iChild++ )
	 if ( key[Node[iChild]] < minValue )    /* new min*/
	 {
	    minValue = key[Node[iChild]];
	    iGoodChild = iChild;
	 }
      if ( nodekey <= minValue )             /* no need to move down-er*/
	 break;
      PLACE_NODE(Node[iGoodChild], iCurrent );
   }                                             /* end for*/
   PLACE_NODE(node, iCurrent );                /* Node goes in hole*/
}

/* Only for max heap */



inline static heapindices HeapMax(Heap *h) {
//heapindices HeapMax(Heap *h) {
  return h->Node[0];
}




inline static void HeapPrintDecreasing(Heap *h)
//void HeapPrintDecreasing(Heap *h)
{        
   heapindices iNode, iChild;
   heapvalues *key = h->key;
   heapindices *Node = h->Node;
   int Size = h->Size;

   fprintf(stderr, "\nTHE HEAP: size %i of %i", (int)Size, (int)h->N);
   for ( iNode = 0; iNode < Size; iNode++ )
   {
      fprintf(stderr,"\npos %i (%i,%d): ",(int)iNode,(int)Node[iNode],key[Node[iNode]]);
      for ( iChild = (iNode << LOG_HEAP_DEGREE) + 1;
            iChild <= (iNode+1) << LOG_HEAP_DEGREE  &&  iChild < Size;
            iChild++ )
      {
         fprintf(stderr, "(%i,%d) ", (int)Node[iChild],key[Node[iChild]]);
         if ( key[Node[iChild]] > key[Node[iNode]] )   /* bad bad bad*/
            {fprintf(stderr, "** bad bad bad **");exit(0);}
      }
   }        
   fprintf(stderr, "\n\n");
}      





/*This function was added for Luciana Buriol*/
inline static void HeapUpdateDecreasing(Heap *h, heapindices v)
//void HeapUpdateDecreasing(Heap *h, heapindices v)
{
   heapindices index, left, right, largest, pos_aux, node_aux, size;
   heapindices iCurrent, iParent;
   heapindices nodeParent;
   heapvalues x;
   heapvalues *key = h->key;   
   heapindices *Pos = h->Pos;  
   heapindices *Node = h->Node;
   int flag=1;

   size = h->Size;

   if(size < 2) return;   

   x=key[v];

   for ( iCurrent=Pos[v],
         iParent=(Pos[v]-1)>>LOG_HEAP_DEGREE;
         iCurrent > 0;
         iCurrent = iParent, iParent = (iParent-1) >> LOG_HEAP_DEGREE )
   {
      nodeParent = Node[iParent];
      if ( x <= key[nodeParent] )   /* we are in the right place*/
         break;
      PLACE_NODE( nodeParent, iCurrent);     /* else move the parent down*/
      flag = 0;
   }
   PLACE_NODE( v, iCurrent );              /* put the node in the hole*/

 if(flag){//if run the first part of this function, this part will not be useful 
   index = Pos[v];

   do{
   left = (index << LOG_HEAP_DEGREE) + 1;
   if (left >= size) return;
   right = left + 1;
   if (right>=size) right=left;

   largest = ((left<size) && (key[Node[left]] > key[Node[index]])) ? left: index;
   if(right < size && key[Node[right]]>key[Node[largest]]) largest = right;

   if (largest != index){
	pos_aux = Pos[Node[index]];
	node_aux = Node[largest];
 	PLACE_NODE(Node[index], Pos[Node[largest]]);
 	PLACE_NODE(node_aux, pos_aux);

        index = Pos[largest];
   }
   else flag=0;
 }while(flag);
 }
}

inline static void HeapIncKey(Heap *h, heapindices v) 
//void HeapIncKey(Heap *h, heapindices v) 
{
   heapindices iCurrent, iParent;
   heapindices nodeParent;
   heapvalues x;
   heapvalues *key = h->key;
   heapindices *Pos = h->Pos;
   heapindices *Node = h->Node;
   
   x=key[v];
   
   for ( iCurrent=Pos[v], 
         iParent=(Pos[v]-1)>>LOG_HEAP_DEGREE;
	 iCurrent > 0;
	 iCurrent = iParent, iParent = (iParent-1) >> LOG_HEAP_DEGREE )
   {
      nodeParent = Node[iParent];
      if ( x <= key[nodeParent] )   /* we are in the right place*/
	 break;
      PLACE_NODE( nodeParent, iCurrent);     /* else move the parent down*/
   }
   PLACE_NODE( v, iCurrent );              /* put the node in the hole*/
}




inline static void HeapMaxInsert(Heap *h, heapindices v)
//void HeapMaxInsert(Heap *h, heapindices v)
{
  heapindices *Pos = h->Pos;
  heapindices *Node = h->Node;
  PLACE_NODE(v,h->Size);
  h->Size++;
  HeapIncKey(h, v);
}


inline static void HeapDelMax(Heap *h)
//void HeapDelMax(Heap *h)
{
   heapindices iCurrent, iChild, iGoodChild, iFirstChild, iLastChild;
   heapvalues maxValue;      /* min value of children of us (dbl for prec.)*/
   heapindices node;
   heapvalues nodekey;
   heapvalues *key = h->key;
   heapindices *Pos = h->Pos;
   heapindices *Node = h->Node;


   h->Size--;    
   node=Node[h->Size];
   nodekey=key[node];
 
  
   for ( iCurrent = 0;
	 /* break when value <= min */;
	 iCurrent = iGoodChild )
   {
      iFirstChild = (iCurrent << LOG_HEAP_DEGREE) + 1;
      iLastChild = MIN( iFirstChild + (1<<LOG_HEAP_DEGREE) - 1, h->Size-1 );
      if ( iFirstChild >= h->Size )                 /* at the end of the tree*/
	 break;
      maxValue = key[Node[iFirstChild]];
      iGoodChild = iFirstChild;                  /* the child with the min*/
      for ( iChild = iFirstChild+1; iChild <= iLastChild; iChild++ )
	 if ( key[Node[iChild]] > maxValue )    /* new min*/
	 {
	    maxValue = key[Node[iChild]];
	    iGoodChild = iChild;
	 }
      if ( nodekey >= maxValue )             /* no need to move down-er*/
	 break;
      PLACE_NODE(Node[iGoodChild], iCurrent );
   }                                             /* end for*/
   PLACE_NODE(node, iCurrent );                /* Node goes in hole*/
}


#endif
