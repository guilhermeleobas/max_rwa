#include<iostream>
#include<fstream>
#include<string.h>
#include <assert.h>
#include<stdlib.h>
#include<stdio.h>

#include"graph.h"
#include"heap.h"
//#include"heapBucket.h"
#include"quicksort.h"

using namespace std;


/****************************************************************************************/
/*                             CLASSE RRtGraph                                     */
/****************************************************************************************/


/* Construtor 1
**********************************************************************/

RRtGraph::RRtGraph(SimpleGraph *graph,int* w)
	:NRRtGraph(graph)
{
	updates=0;
	for(int i=0;i<getNumVertices();i++){
		for(int j=0;j<getNumVertices();j++){ 
			inListIndex[i][j]=-1;
		}
	}
	initialize(w);
}

/* Construtor 2
**********************************************************************/

RRtGraph::RRtGraph(int nVertices,int nArcs,int lArcs[MAXARCS][2],int* w)
	:NRRtGraph(nVertices,nArcs,lArcs)
{
	updates=0;
	for(int i=0;i<getNumVertices();i++){
		for(int j=0;j<getNumVertices();j++){ 
			inListIndex[i][j]=-1;
		}
	}
	initialize(w);
}

/* Cria uma nova copia do grafo original
***********************************************************************/

void RRtGraph::initialize(int* w){
	int u,v;
	for(int i=0;i<getNumVertices();i++){
		inDegree[i]=0;
	}
	for(int i=0;i<getNumArcs();i++){
		u = getArc(i).u;
		v = getArc(i).v;
		inList[v][inDegree[v]]=u;
		inListIndex[u][v] = inDegree[v];
		inDegree[v]++;
	}
}


/* Calcula o caminho mais curto entre dois terminais
*********************************************************************/
int RRtGraph::shortestPath(int s,int t,int *path,int &size){
	if(distance[s][t]==INF){
		size=INF;
	} else {
		size=0;		
		path[size] = t;
		while(path[size]!=s){
			path[size+1]=parent[s][path[size]];
			if(in(path[size+1],path[size])){
				assert(distance[s][path[size+1]]+1==distance[s][path[size]]);
				size++;
			} else {
				abort();
				makeBFS(s);	
				return shortestPath(s,t,path,size);
			}
		}
	}
	assert(size==distance[s][t]);
	return size;
}


/* Deleta um subconjunto de arestas 
* O caminho vem invertido. Ex: a<-b<-c<-d = (d,c)+(c,b)+(b,a)
*****************************************************************************/

void RRtGraph::deleteArcs(int *arcs,int size){
	int index,last,u,v;
	SimpleGraph::deleteArcs(arcs,size);
	for(int i=size;i>0;i--){
		u = arcs[i];
		v = arcs[i-1];
		index = inListIndex[u][v];
		last = inList[v][inDegree[v]-1];
		inList[v][index]=last;
		inListIndex[last][v]=index;
		inDegree[v]--;
		inListIndex[u][v]=-1;		
	}
	for(int i=size;i>0;i--){
		u = arcs[i];
		v = arcs[i-1];
		for(int s=0;s<getNumVertices();s++){
			updateArc(s,u,v);
		}
	}
}


/* Atualiza dinamicamente a arvore de BFS
**********************************************************/

void RRtGraph::updateBFS(int s){
	int queue[MAXVERT];
	int first=0; // ind comeco da queue
	int last=0; // ind final da queue
	int dist,u,v,x;

	for(int i=0;i<getNumVertices();i++){
		v = i;
		u = parent[s][v];
		if(u!=v && !in(u,v)){
			// Procura um arco substituto
			for(int j=0;j<inDegree[v];j++){
				x = inList[v][j];
				if(distance[s][v]==(distance[s][x]+1)){
					parent[s][v]=x;
					break;
				}
			}
			//Identifica os vertices afetados
			if(parent[s][v]==u){
				queue[last++]=v;
				do{
					u = queue[first];
					distance[s][u] = INF;
					for(int i=0;i<getOutDegree(u);i++){
						v = getOutNeighbor(u,i);
						if(parent[s][v]==u){
							for(int j=0;j<inDegree[v];j++){
								x = inList[v][j];
								if(distance[s][v]==(distance[s][x]+1)){
									parent[s][v]=x;
									break;
								}
							}
							if(parent[s][v]==u && distance[s][v]<INF){
								queue[last]=v;
								last++;				
							}
						}
					}
					first++;
				}while(first<last);
			}
		}
	}
		
	if(last>0){
		Heap* H=NULL;
		H=HeapInit(getNumVertices());
		HeapSetKeys(H,distance[s]); 

		for(int i=0;i<last;i++){
			v = queue[i];
			for(int j=0;j<inDegree[v];j++){
				u = inList[v][j];
				if(distance[s][v]>(distance[s][u]+1)){
					distance[s][v] = distance[s][u]+1;
					parent[s][v]=u;
				}
			}
			if(distance[s][v]!=INF){
				HeapInsert(H, v,distance[s][v]);				
			}
		}


		// Faz o mesmo que Dijkstra
		while(HeapSize(H) != 0){ 
			u=HeapMin(H); 
			HeapDelMin(H);
			for(int i=0;i<getOutDegree(u);i++){
				v = getOutNeighbor(u,i);
				dist = distance[s][u]+1;
				if (distance[s][v]>dist){ 
					if(distance[s][v]==INF){
						distance[s][v] = dist;	
						parent[s][v]=u;
						HeapInsert(H,v,dist);
	
					} else{
						distance[s][v] = dist;	
						parent[s][v]=u;
						HeapDecKey(H,v,dist);
					}
				}
			}		
		} 
		HeapFree(H);
	}
}

void RRtGraph::updateArc(int s, int u, int v){
	updates++;
	int queue[MAXVERT];
	int first=0; // ind comeco da queue
	int last=0; // ind final da queue
	int dist,x;

	// Testa se o arco esta no grafo	
	if (parent[s][v]!=u){
		return;
	} else {
		// Procura um arco substituto
		for(int j=0;j<inDegree[v];j++){
			u = inList[v][j];
			if(distance[s][v]==(distance[s][u]+1)){
				parent[s][v]=u;
				return;
			}
		}
	}

	//Identifica os vertices afetados
	queue[last++]=v;
	do{
		u = queue[first];
		distance[s][u] = INF;
		for(int i=0;i<getOutDegree(u);i++){
			v = getOutNeighbor(u,i);
			if(parent[s][v]==u){
				for(int j=0;j<inDegree[v];j++){
					x = inList[v][j];
					if(distance[s][v]==(distance[s][x]+1)){
						parent[s][v]=x;
						break;
					}
				}
				if(parent[s][v]==u){
					queue[last]=v;
					last++;				
				}
			}
		}
		first++;
	}while(first<last);

	// Insere os vertices afetados na pilha

	Heap* H=NULL;
	H=HeapInit(getNumVertices());
	HeapSetKeys(H,distance[s]); 

	for(int i=0;i<last;i++){
		v = queue[i];
		for(int j=0;j<inDegree[v];j++){
			u = inList[v][j];
			if(distance[s][v]>(distance[s][u]+1)){
				distance[s][v] = distance[s][u]+1;
				parent[s][v]=u;
			}
		}
		if(distance[s][v]!=INF){
			HeapInsert(H, v,distance[s][v]);				
		}
	}

	// Faz o mesmo que Dijkstra

	while(HeapSize(H) != 0){ 
		u=HeapMin(H); 
		HeapDelMin(H);
		for(int i=0;i<getOutDegree(u);i++){
			v = getOutNeighbor(u,i);
			dist = distance[s][u]+1;
			if (distance[s][v]>dist){ 
				if(distance[s][v]==INF){
					distance[s][v] = dist;	
					parent[s][v]=u;
					HeapInsert(H,v,dist);

				} else{
					distance[s][v] = dist;	
					parent[s][v]=u;
					HeapDecKey(H,v,dist);
				}
			}	
		}		
	} 
	HeapFree(H);
}


/****************************************************************************************/
/*                             CLASSE RRgGraph                                     */
/****************************************************************************************/


/* Construtor 1
**********************************************************************/

RRgGraph::RRgGraph(SimpleGraph *graph,int* w)
	:NRRtGraph(graph,w)
{
	updates=0;
	for(int i=0;i<getNumVertices();i++){
		for(int j=0;j<getNumVertices();j++){ 
			inListIndex[i][j]=-1;
		}
	}
	initialize(w);
}

/* Construtor 2
**********************************************************************/

RRgGraph::RRgGraph(int nVertices,int nArcs,int lArcs[MAXARCS][2],int* w)
	:NRRtGraph(nVertices,nArcs,lArcs,w)
{
	updates=0;
	for(int i=0;i<getNumVertices();i++){
		for(int j=0;j<getNumVertices();j++){ 
			inListIndex[i][j]=-1;
		}
	}
	initialize(w);
}

/* Cria uma nova copia do grafo original
***********************************************************************/

void RRgGraph::initialize(int* w){
	int u,v;
	for(int i=0;i<getNumVertices();i++) inDegree[i]=0;
	for(int i=0;i<getNumArcs();i++){
		u = getArc(i).u;
		v = getArc(i).v;
		inList[v][inDegree[v]]=u;
		inListIndex[u][v] = inDegree[v];
		inDegree[v]++;
	}
	for(int i=0;i<getNumVertices();i++) makeGSP(i);
}

/* Calcula o caminho mais curto entre dois terminais
*********************************************************************/
int RRgGraph::shortestPath(int s,int t,int *path,int &size){
	int i;
	if(getDistance(s,t)==INF){
		size=INF;
	} else {
		size=0;		
		path[size] = t;
		
		while(path[size]!=s){
			i=0;
			while(gSP[s][getOutListIndex(inList[path[size]][i],path[size])]==0) i++;
			path[size+1] = inList[path[size]][i];
			size++;
		}
	}
	assert(size<INF);
	return size;
}


/* Calcula a arvore de BFS partindo do no "s"
*********************************************************************/
void RRgGraph::makeGSP(int s){
	int u,v;
	// Inicializa as variaveis 
	for(int i=0;i<getNumVertices();i++){
		delta[s][i]=0;
	}
	// Costroi o grafo de caminhos mais curtos
	for(int j=0;j<getNumArcsBCK();j++){
		u = getArc(j).u;
		v = getArc(j).v;
		if(getDistance(s,u)==(getDistance(s,v)-1) && in(u,v)){
			gSP[s][j]=1;
			delta[s][v]++;
		} else {
			gSP[s][j]=0;
		}
	}
}


/* Deleta um subconjunto de arestas 
* O caminho vem invertido. Ex: a<-b<-c<-d = (d,c)+(c,b)+(b,a)
*****************************************************************************/

void RRgGraph::deleteArcs(int *arcs,int size){
	int index,last,u,v;
	SimpleGraph::deleteArcs(arcs,size);
	for(int i=size;i>0;i--){
		u = arcs[i];
		v = arcs[i-1];
		index = inListIndex[u][v];
		last = inList[v][inDegree[v]-1];
		inList[v][index]=last;
		inListIndex[last][v]=index;
		inDegree[v]--;
		inListIndex[u][v]=-1;		
	}
	for(int i=size;i>0;i--){
		u = arcs[i];
		v = arcs[i-1];
		for(int s=0;s<getNumVertices();s++){
			updateArc(s,u,v);
		}
	}
}

/* Atualiza dinamicamente a arvore de BFS
**********************************************************/

void RRgGraph::updateArc(int s, int u, int v){
	updates++;
	int queue[MAXVERT];
	int first=0; // ind comeco da queue
	int last=0; // ind final da queue
	int arc,dist,x;

	// Testa se o arco esta no grafo	
	arc = getOutListIndex(u,v);
	if (gSP[s][arc]==0){
		return;
	} else {
		// Procura um arco substituto
		gSP[s][arc]=0;
		delta[s][v]--;
		if (delta[s][v]>0){
			return;
		}
	}

	//Identifica os vertices afetados
	queue[last++]=v;
	do{
		u = queue[first];
		setDistance(s,u,INF);
		for(int i=0;i<getOutDegree(u);i++){
			v = getOutNeighbor(u,i);
			arc = getOutListIndex(u,v);
			if(gSP[s][arc]==1){
				gSP[s][arc]=0;
				delta[s][v]--;
				if(delta[s][v]==0){
					queue[last]=v;
					last++;
				}		
			} 
		}
		first++;
	}while(first<last);

	// Insere os vertices afetados na pilha

	Heap* H=NULL;
	H=HeapInit(getNumVertices());
	HeapSetKeys(H,distance[s]); 

	for(int i=0;i<last;i++){
		v = queue[i];
		for(int j=0;j<inDegree[v];j++){
			u = inList[v][j];
			if(distance[s][v]>(distance[s][u]+1)){
				distance[s][v]  = distance[s][u]+1;
			}
		}
		if(distance[s][v]!=INF){
			HeapInsert(H, v,distance[s][v]);				
		}
	}

	// Faz o mesmo que Dijkstra

	while(HeapSize(H) != 0){ 
		u=HeapMin(H); 
		HeapDelMin(H);

		for(int i=0;i<getOutDegree(u);i++){
			v = getOutNeighbor(u,i);
			dist = distance[s][u]+1;
			if (distance[s][v]>dist){ 
				if(distance[s][v]==INF){
					distance[s][v] = dist;	
					HeapInsert(H,v,dist);

				} else{
					distance[s][v] = dist;	
					HeapDecKey(H,v,dist);
				}
			}	
		}

		// Atualiza o grafo de caminhos mais curtos
		for(int i=0;i<inDegree[u];i++){
			x = inList[u][i];
			if (distance[s][x]==(distance[s][u]-1)){ 
				gSP[s][getOutListIndex(x,u)]=1;
				delta[s][u]++;
			} else {
				gSP[s][getOutListIndex(x,u)]=0;
			}
		}		
	} 
	HeapFree(H);
}

/****************************************************************************************/
/*                             CLASSE FFGtGraph                                      */
/****************************************************************************************/


/* Construtor 1
**********************************************************************/

FFGtGraph::FFGtGraph(SimpleGraph *graph,int* w)
	:NRRtGraph(graph)
{
	updates=0;
	for(int i=0;i<getNumVertices();i++){
		for(int j=0;j<getNumVertices();j++){ 
			inListPointer[i][j]=NULL;
		}
	}
	initialize(w);
}

/* Construtor 2
**********************************************************************/

FFGtGraph::FFGtGraph(int nVertices,int nArcs,int lArcs[MAXARCS][2],int* w)
	:NRRtGraph(nVertices,nArcs,lArcs)
{
	updates=0;
	for(int i=0;i<getNumVertices();i++){
		for(int j=0;j<getNumVertices();j++){ 
			inListPointer[i][j]=NULL;
		}
	}
	initialize(w);
}


/* Cria uma nova copia do grafo original
**************************************************/

void FFGtGraph::initialize(int* w){
	int v;
	//Inicializa os dados
	for(int i=0;i<getNumVertices();i++){
		inDegree[i]=0;
		free(inList[i]);
		inList[i]= new Node();
	}

	// Monte a inList em dorde CRESECENTE de rank (rank[i]=i)
	for(int u=(getNumVertices()-1);u>=0;u--){ 
		for(int j=0;j<getOutDegree(u);j++){
			v = getOutNeighbor(u,j);
			inListPointer[u][v] = new Node(u,inList[v]);			
			inDegree[v]++;
		}
	}
}

/* Calcula o caminho mais curto entre dois terminais
*********************************************************************/
int FFGtGraph::shortestPath(int s,int t,int *path,int &size){
	if(distance[s][t]==INF){
		size=INF;
	} else {
		size=0;		
		path[size] = t;
		while(path[size]!=s){
			path[size+1]=parent[s][path[size]];
			if(in(path[size+1],path[size])){
				size++;
			} else {
				abort();
				updateArc(s,path[size+1],path[size]);
				return shortestPath(s,t,path,size);
			}
		}
	}
	assert(size==distance[s][t]);
	return size;
}


/* Deleta um subconjunto de arestas 
* O caminho vem invertido. Ex: a<-b<-c<-d = (d,c)+(c,b)+(b,a)
*****************************************************************************/

void FFGtGraph::deleteArcs(int *arcs,int size){
	int u,v;
	for(int i=size;i>0;i--){
		u = arcs[i];
		v = arcs[i-1];
		deleteArc(u,v);
		delete (inListPointer[u][v]);
		inListPointer[u][v]=NULL;		
		inDegree[v]--;
	}
	for(int i=size;i>0;i--){
		u = arcs[i];
		v = arcs[i-1];
		for(int s=0;s<getNumVertices();s++){
			updateArc(s,u,v);
		}
	}
}

/* Atualiza dinamicamente a arvore de BFS
**********************************************************/

void FFGtGraph::updateBFS(int s){
	abort();
}


/* Ordena os elementos em S(v)
*************************************************************/

void FFGtGraph::sortSubTree(int s,int v,int *S,int &sSize){
	int children[MAXVERT][MAXVERT];
	int chSize[MAXVERT];
	int p,u,next; 

	// Monta a lista de filhos
	for(int ch=0;ch<getNumVertices();ch++) chSize[ch]=0;
	for(int ch=0;ch<getNumVertices();ch++){
		p = parent[s][ch];
		if(p>=0) children[p][chSize[p]++]=ch;
	}

	// Define a ordenacao
	sSize=next=0;
	S[sSize++]=v;
	do{
		u = S[next++];
		for(int i=0;i<chSize[u];i++) S[sSize++] = children[u][i];
	}while(next<sSize);
}

/* Atualiza a bfs-tree
*************************************************************/

void FFGtGraph::propagate(LinkedSet *L,int s){
	int a,b,c;
	while(lsSize(L)>0){	
		b = lsMin(L).y;
		a = lsSelectParent(L,b);
		assert(in(a,b));
		lsDelArcs(L,b);
		parent[s][b]=a;
		if(distance[s][b]>(distance[s][a]+1)){
			distance[s][b]=distance[s][a]+1;
			for(int i=0;i<getOutDegree(b);i++){
				c = getOutNeighbor(b,i);
				if(distance[s][c]>(distance[s][b]+1) || 
				   (distance[s][c]==(distance[s][b]+1) && b<parent[s][c]))
				{
					lsInsert(L,b,c,distance[s][b]+1);
				}
			}
		}
	}
}

/* Atualiza dinamicamente uma aresta da arvore de BFS
**********************************************************/


void FFGtGraph::updateArc(int s, int u, int v){ 
	updates++;
	int a,b,bestKey;
	int sSize,S[MAXVERT];
	int rSize,R[MAXVERT];
	Node* tmp;

	// Testa se o arco esta no grafo	
	if (parent[s][v]==u){
		sortSubTree(s,v,S,sSize);
		rSize=0;
		for(int j=0;j<sSize;j++){
			// Procura um pai alternativo
			b = S[j];                                     
			parent[s][b]=-1;
			tmp = inListPointer[parent[s][b]][b];
			assert(tmp!=NULL);
			do{
				a = tmp->key;                       
				assert(in(a,b));
				if((distance[s][a]+1)==distance[s][b]){	
					parent[s][b]=a;                         
					distance[s][b]=distance[s][a]+1; 
					break;
				}
				tmp=tmp->next;
			}while(tmp!=inList[b]);
			// Se nao tem outro pai, eh porque "b" caiu pelo menos um nivel
			if(parent[s][b]==-1){
				distance[s][b]=INF;                        
				R[rSize++]=b;
			}
		}

		// Monta um Liked set
		if(rSize>0){
			LinkedSet* L = lsInit(&LS,getNumVertices()); 
			for(int j=0;j<rSize;j++){
				b = R[j];
				bestKey=INF;
				tmp = inList[b]->next;
				for(int i=0;i<inDegree[b];i++){
					assert(tmp!=inList[b]);
					a = tmp->key;
					assert(in(a,b));
					if(distance[s][a]<bestKey){	
						parent[s][b]=a;
						bestKey=distance[s][a];
					}
					tmp=tmp->next;
				}
				assert(tmp==inList[b]);
				if(bestKey<INF){
					lsInsert(L,parent[s][b],b,distance[s][parent[s][b]]+1);
				}
			}
			propagate(L,s);
			lsFree(L);
		} 
	}
}

/* Apaga a lista de adjacencias
**********************************************************************/

void FFGtGraph::free(Node* list){
	if(list==NULL) return;
	Node* nil = list;
	Node* tmp = list->prev;
	Node* prev=NULL;
	while(tmp!=nil){
		prev=tmp->prev;
		delete tmp;
		tmp = prev;		
	}
	delete nil;
}
