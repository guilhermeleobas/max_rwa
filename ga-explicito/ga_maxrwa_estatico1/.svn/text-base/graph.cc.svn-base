#include<iostream>
#include<fstream>
#include<string.h>
#include <assert.h>
#include<stdlib.h>
#include<stdio.h>

#include"graph.h"
#include"heap.h"
//#include"heapBucket.h"
#include"quicksort.h"

using namespace std;

/****************************************************************************************/
/*                             CLASSE SIMPLEGRAPH                                       */
/****************************************************************************************/


/* Construtor 1
*****************************************************/

SimpleGraph::SimpleGraph(SimpleGraph *graph,int* w){
	numVertices = graph->numVertices;
	numArcsBCK = graph->numArcs;

	for(int i=0;i<numVertices;i++){
		for(int j=0;j<numVertices;j++){ 
			outListIndex[i][j]=-1; 
		}
	}

	for(int i=0;i<numArcsBCK;i++){
		listArcs[i] = graph->listArcs[i];
		adjMat[listArcs[i].u][listArcs[i].v] = &listArcs[i];
	} 
	reset(w);
}


/* Construtor 2
*****************************************************/

SimpleGraph::SimpleGraph(int nVertices,int nArcs,int lArcs[MAXARCS][2],int* w){
	numVertices = nVertices;
	numArcsBCK = nArcs;

	for(int i=0;i<numVertices;i++){
		for(int j=0;j<numVertices;j++){ 
			outListIndex[i][j]=-1; 
		}
	}

	for(int i=0;i<nArcs;i++){
		listArcs[i].u = lArcs[i][0];
		listArcs[i].v = lArcs[i][1];
		listArcs[i].weight = 1;
		adjMat[listArcs[i].u][listArcs[i].v] = &listArcs[i];
	} 
	reset(w);
}


/* Cria uma nova copia do grafo original
*****************************************************/

void SimpleGraph::reset(int *weight){
	int u,v;
	numArcs = numArcsBCK;
	for(int i=0;i<numVertices;i++){
		outDegree[i]=0;
	}
	for(int i=0;i<numArcs;i++){
		u = listArcs[i].u;
		v = listArcs[i].v;
		outList[u][outDegree[u]]=v;
		outListIndex[u][v] = outDegree[u];
		outDegree[u]++;
	}

	if(weight!=NULL){
		for(int i=0;i<numArcs;i++){
			listArcs[i].weight = weight[i];
		}
	}
}

/* Calcula o diametro do grafo
***************************************************/

int SimpleGraph::diameter(){
	int size,diam=0;
	for(int i=0;i<numVertices;i++){
		for(int j=i+1;j<numVertices;j++){
			size = getDistance(i,j);
			if(size > diam) diam=size;
		}
	}
	return diam;
}


/* Calcula o caminho mais curto entre dois terminais
*********************************************************************/

int SimpleGraph::dijkstra(int s,int t, int *path,int &size){
	int d[MAXVERT];
	int parent[MAXVERT];
	int i, j, n; 
	int value;
		 
	//Inicializa os dados	
	Heap* H=NULL;
	H=HeapInit(numVertices);
	for(i=0; i<numVertices; i++) d[i]=INF;

	// Calcula o caminho mais curto	
	d[s]=0;	
	HeapSetKeys(H,d); 
	HeapInsert(H, s, d[s]);
	while(HeapSize(H) != 0){ 
		i=HeapMin(H); 
		HeapDelMin(H);
		for(n=0;n<outDegree[i];n++){
			j = outList[i][n];
			value=d[i]+adjMat[i][j]->weight;
			if (d[j] > value){ 
				parent[j]=i;
				if(d[j]==INF){
					d[j]=value;
					HeapInsert(H,j,value);
				} else{
					d[j]=value;
					HeapDecKey(H,j,value);
				}
			}	
		}
	} 
	HeapFree(H);

	// Identifica o caminho mais curto
	if(d[t]==INF){
		size = INF;
	} else {
		size=0;
		int aux = t;
		while(aux!=s){
			path[size++]=aux;
			aux = parent[aux];
		}
		path[size++]=aux;
		size--;
	}
	return size;
}


/* Calcula o caminho mais curto entre dois terminais usando BFS
*********************************************************************/

int SimpleGraph::shortestPathBFS(int s,int t,int *path,int &size){
	int parent[MAXVERT];
	int queue[MAXVERT];
	int first=0; // indice do comeco da fila
	int last=0; // indice final da fila
	int v,next;

	// Inicializa as variaveis 
	size = INF; 
	for(int i=0;i<numVertices;i++) parent[i]=-1;

	// Acha o caminho mais curto
	queue[last++]=s;
	parent[s]=s;
	do{
		v = queue[first];
		for(int i=0;i<outDegree[v];i++){
			next = outList[v][i];
			if(parent[next]<0){
				parent[next] = v;
				queue[last++] = next;
				// Retorna o caminho quando encontra "t"
				if(next==t){
					size=0;
					path[size] = t;
					while(path[size]!=s){
						size++;
						path[size]=parent[path[size-1]];
					}
					return size;
				}
			}
		}
		first++;
	}while(first<last);
	//Se nao chegou em "t" return size=INF
	return size;
}


/****************************************************************************************/
/*                             CLASSE COMPOSEDGRAPH                                     */
/****************************************************************************************/



/* Construtor 1
**********************************************************************/

ComposedGraph::ComposedGraph(SimpleGraph *graph,int* w)
	:SimpleGraph(graph,w)
{
	total=pruned=lost=updates=0;
	initialize(w);
}


/* Construtor 2
**********************************************************************/

ComposedGraph::ComposedGraph(int nVertices,int nArcs,int lArcs[MAXARCS][2],int* w)
	:SimpleGraph(nVertices,nArcs,lArcs,w)
{
	total=pruned=lost=updates=0;
	initialize(w);
}


/* Cria uma nova copia do grafo original
***********************************************************************/

void ComposedGraph::initialize(int* w){
	int u,v;
	numComponents=1;
	for(int i=0;i<numVertices;i++){
		component[i]=0;
		noDegree[i]=0;
	}
	for(int i=0;i<numArcs;i++){
		u = listArcs[i].u;
		v = listArcs[i].v;
		noAdjList[u][noDegree[u]]=v;		
		noAdjIndex[u][v]=noDegree[u];
		noDegree[u]++;
	}
}

/* Calcula o caminho mais curto entre dois terminais (usando BFS ou Dijkstra)
******************************************************************************/

int ComposedGraph::shortestPath(int u ,int v,int* p,int& s){	
	total++;
	if(!connected(u,v)){
		s = INF;
		pruned++;
	} else {
		s = SimpleGraph::shortestPath(u,v,p,s);
		if(s==INF) lost++;
	}
	return s;
}

/* Deleta um subconjunto de arestas 
* O caminho vem invertido. Ex: a<-b<-c<-d = (d,c)+(c,b)+(b,a)
*****************************************************************************/

void ComposedGraph::deleteArcs(int *arcs,int size){
	SimpleGraph::deleteArcs(arcs,size);
	int index,last,u,v,erased=0;
	for(int i=size;i>0;i--){
		u = arcs[i];
		v = arcs[i-1];
		if(!in(u,v) && !in(v,u)){
			index = noAdjIndex[u][v];
			last = noAdjList[u][noDegree[u]-1];
			noAdjIndex[u][last]=index;
			noAdjList[u][index] = last;
			noDegree[u]--;

			index = noAdjIndex[v][u];
			last = noAdjList[v][noDegree[v]-1];
			noAdjIndex[v][last]=index;
			noAdjList[v][index] = last;
			noDegree[v]--;
			erased=1;
		}
	}
	if(erased) updateComponents();
}


/* Identifica os vertices na componente conexa de s
*******************************************************/

void ComposedGraph::makeBFS(int s){
	int queue[MAXVERT],first=0,last=0,y,x;
	queue[last++]=s;
	do{
		x = queue[first];
		for(int i=0;i<noDegree[x];i++){
			y = noAdjList[x][i];
			if(component[y]<0){
				queue[last++] = y;
				component[y] = component[s];
			}
		}
		first++;
	}while(first<last);
}


/* Atualiza as componentes conexas do grafo
************************************************/

void ComposedGraph::updateComponents(){
	updates++;
	numComponents=0;
	for(int i=0;i<numVertices;i++){
		component[i]=-1;
	}
	for(int i=0;i<numVertices;i++){
		if(component[i]<0){
			component[i]=numComponents;
			makeBFS(i);
			numComponents++;
		}
	}
}


