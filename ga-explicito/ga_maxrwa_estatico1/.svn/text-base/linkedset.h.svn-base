#ifndef _LINKEDSET_H
#define _LINKEDSET_H

#include <stdlib.h>             
#include <stdio.h>
#include<iostream>
#include<assert.h>
using namespace std;

#include "graph.h"

/* For the sake of inlining, we include implementation in header file 
*************************************************************************/

typedef struct {
	int x;
	int y;
	int z;
} Tuple;


typedef struct {
	int bucketSize;
	int minKey;
	int maxKey;
	Tuple bucket[MAXVERT][MAXARCS];
	int sizeKey[MAXVERT];
	Tuple lsIn[MAXVERT][MAXVERT];
	int sizeIn[MAXVERT];
} LinkedSet;



inline static LinkedSet* lsInit(LinkedSet *LS, int numVertices){
	LS->bucketSize = 0;
	LS->minKey=numVertices;
	LS->maxKey=numVertices;
	for(int i=0;i<numVertices;i++){
		LS->sizeKey[i]=0;
		LS->sizeIn[i]=0;
	}
	return LS;
} 

/*inline static LinkedSet* lsInit(int numVertices){
	LinkedSet *h = new LinkedSet;
	h->bucketSize = 0;
	h->minKey=numVertices;
	h->maxKey=numVertices;
	for(int i=0;i<numVertices;i++){
		h->sizeKey[i]=0;
		h->sizeIn[i]=0;
	}
	return h;
} */

inline static void lsInsert(LinkedSet *h, int u ,int v, int k){
	assert(k<h->maxKey);

	int index=h->sizeIn[v];

	// Insere o arco v na lista de incidencia de v.y
	h->lsIn[v][h->sizeIn[v]].x=k;
	h->lsIn[v][h->sizeIn[v]].y=h->sizeKey[k];
	h->sizeIn[v]++;

	// Insere o arco v no bucket
	h->bucket[k][h->sizeKey[k]].x = u;
	h->bucket[k][h->sizeKey[k]].y = v;
	h->bucket[k][h->sizeKey[k]].z = index;
	h->sizeKey[k]++;
	if(k<h->minKey) h->minKey=k;
	h->bucketSize++;
}



inline static int lsSelectParent(LinkedSet *h, int b){
	assert(h->sizeIn[b]>0);
	int key,index,v,best,bestKey=INF;
	for(int i=0;i<h->sizeIn[b];i++){
		key = h->lsIn[b][i].x;
		index = h->lsIn[b][i].y;
		v = h->bucket[key][index].x;
		if(key<bestKey || (key==bestKey && v<best)){
			assert(h->bucket[key][index].y==b);
			best=v;
			bestKey=key;
		}
	}
	assert(bestKey==h->minKey);
	return best;
}

inline static void lsDelArcs(LinkedSet *h, int b){
	assert(h->bucketSize>=h->sizeIn[b]);
	int key;
	int index;
	for(int i=0;i<h->sizeIn[b];i++){
		key = h->lsIn[b][i].x;
		index = h->lsIn[b][i].y;
		Tuple last = h->bucket[key][h->sizeKey[key]-1];
		h->bucket[key][index] = last;
		h->lsIn[last.y][last.z].y=index;
		h->sizeKey[key]--;
	}
	h->bucketSize-=h->sizeIn[b];
	h->sizeIn[b]=0;
	if(h->bucketSize==0){
		h->minKey=h->maxKey;
	} 
}





inline static void lsFree(LinkedSet *h){/*delete [] (h);*/}

inline static int  lsSize(LinkedSet *h){return (h->bucketSize);}

inline static Tuple lsMin(LinkedSet *h) {
	assert(h->bucketSize>0); 
	assert(h->minKey<h->maxKey); 

	while(h->sizeKey[h->minKey]==0 && h->minKey<h->maxKey) h->minKey++;
		return h->bucket[h->minKey][h->sizeKey[h->minKey]-1];
}

inline static void lsPrint(LinkedSet *h){
	cout << "LikedSet size: " << lsSize(h) << endl;
	if(lsSize(h)>0){
		cout << "Min: <" << lsMin(h).x << "," << lsMin(h).y << ">\n";
		cout << "MinKey: " << h->minKey << endl;
	}

	for(int i=0;i<h->maxKey;i++){
		if(h->sizeKey[i]>0){
			cout << i << ": ";
			for(int j=0;j<h->sizeKey[i];j++){
				int u = h->bucket[i][j].x;
				int v = h->bucket[i][j].y;				
				cout << "<" << u << "," << v << "> ";
			}
			cout << " = " << h->sizeKey[i] << endl;
		}
	}

	cout << "------\n";
	
	int key,index,u,v;
	for(int b=0;b<h->maxKey;b++){
		if(h->sizeIn[b]>0){
			cout << b << ": ";
			for(int i=0;i<h->sizeIn[b];i++){
				key = h->lsIn[b][i].x;
				index = h->lsIn[b][i].y;
				u = h->bucket[key][index].x;
				v = h->bucket[key][index].y;
				cout << "<" << u << "," << v << "> ";
			}	
			cout << " = " << h->sizeIn[b] << endl;
		}
	}
}



/*inline static void lsCheck(LinkedSet *L){
	int key,index,u,v;
	for(int b=0;b<L->maxKey;b++){
		for(int i=0;i<L->sizeIn[b];i++){
			key = L->lsIn[b][i].x;
			index = L->lsIn[b][i].y;
			u = L->bucket[key][index].x;
			v = L->bucket[key][index].y;
			assert(v==b);
		}
	}
}*/


#endif
